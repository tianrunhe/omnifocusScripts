// COPY & PASTE into editor app. EDIT & SAVE with “.omnifocusjs” file extension.
/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Bruce Tian",
  "identifier": "com.tianrunhe.reviewProject",
  "version": "1.0",
  "description": "Review a Project",
  "label": "Review a Project",
  "shortLabel": "Review a Project",
  "paletteLabel": "Review a Project",
  "image": "magnifyingglass.circle.fill"
}*/
const performPlugInAction = (pluginID, actionName) => {
  plugin = PlugIn.find(pluginID)
  if (plugin === null) {
    throw new Error("Plug-in not installed.")
  }
  actionNames = plugin.actions.map(action => action.name)
  if (actionNames.indexOf(actionName) === -1) {
    throw new Error(`Action "${actionName}" is not in the plug-in.`)
  } else {
    if (plugin.action(actionName).validate()) {
      plugin.action(actionName).perform()
    } else {
      throw new Error(`The action "${actionName}" is not validated to execute.`)
    }
  }
}
(() => {
  const action = new PlugIn.Action(async function(selection, sender) {
    
    try {
      const project = selection.projects[0]
      const allTasks = project.tasks
      const availableTasks = allTasks.filter(
        t => !t.completed && t.status !== Task.Status.Dropped
      )
      availableTasks.forEach((task) => {
        if (task.hasChildren) {
          const allSubTasks = task.tasks
          const availableSubTasks = allSubTasks.filter(
            t => !t.completed && t.status !== Task.Status.Dropped
          )
          console.log(`${task.name} is a sub-project. The first action to take is ${availableSubTasks[0].name}`)
        } else {
          const isNextActionForm = new Form()
          const isNextActionMenu = new Form.Field.Option(
            "isNextActionMenu",
            'actionable? ',
            [true, false],
            ['Yes', 'No'],
            null
          )
          isNextActionForm.addField(new Form.Field.String(
            "textInput",
            "Task",
            task.name
          ))
          isNextActionForm.addField(isNextActionMenu)
          const isNextActionFormPromise = isNextActionForm.show(`Next task?`, "Continue")
          isNextActionForm.validate= (o) => o.values["isNextActionMenu"] !== undefined
          isNextActionFormPromise.then((o) => {
            performPlugInAction("com.tianrunhe.setTags", "Set Tags")
          })
        }
      })
    } catch(err) {
      if(!err.causedByUserCancelling) {
        console.error(err.name, err.message)
      }
    }
  });

  action.validate = function(selection, sender){
    return selection.projects.length === 1
  };
  
  return action;
})();