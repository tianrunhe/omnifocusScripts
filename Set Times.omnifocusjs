/*{
  "type": "action",
  "targets": ["omnifocus"],
  "author": "Bruce Tian",
  "identifier": "com.tianrunhe.setTimes",
  "version": "1.0",
  "description": "Set Estimated Duration, Defer Until and Due Date for a task",
  "label": "Set Times for Task",
  "shortLabel": "Set Times for Task",
  "paletteLabel": "Set Times for Task",
  "image": "clock.circle.fill"
}*/
(() => {
  const action = new PlugIn.Action((selection, sender) => {
    const task = selection.tasks[0]
    const currentEstimatedMinutes = task.estimatedMinutes
    const currentDeferDate = task.deferDate
    const currentDueDate = task.dueDate

    const form = new Form()
    form.validate = (o) => {
      return o.values["estimatedDurationOptionMenu"] !== undefined
        && o.values["deferDateInput"] !== undefined
        && o.values["dueDateInput"] !== undefined
    }

    const estimatedDurationOptions = [5, 15, 30, 60]
    const estimatedDurationOptionMenu = new Form.Field.Option(
      "estimatedDurationOptionMenu",
      "Estimated Duration",
      estimatedDurationOptions,
      estimatedDurationOptions.map(e => `${e}m`),
      currentEstimatedMinutes
    )
    form.addField(estimatedDurationOptionMenu)
    
    const deferDateInput = new Form.Field.Date(
      "deferDateInput",
      "Defer Date",
      currentDeferDate
    )
    form.addField(deferDateInput)

    const dueDateInput = new Form.Field.Date(
      "dueDateInput",
      "Due Date",
      currentDueDate
    )
    form.addField(dueDateInput)
    
    const formPromise = form.show(
      "Times for this task",
      "Complete")
    formPromise.then((o) => {
      task.estimatedMinutes = o.values["estimatedDurationOptionMenu"]
      task.deferDate = o.values["deferDateInput"]
      task.dueDate = o.values["dueDateInput"]
    })
    formPromise.catch((e) => {
      if (!err.causedByUserCancelling) {
        console.error(err.name, err.message)
      }
    })
  });

  action.validate = function(selection, sender){
    return selection.tasks.length === 1
  };
  
  return action;
})();